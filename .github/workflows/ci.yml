# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test
        env:
          CI: true

  build-anchor:
    name: Build Anchor Program
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Anchor CLI
        run: cargo install --git https://github.com/coral-xyz/anchor anchor-cli --locked

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.2/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Setup Solana config
        run: |
          solana config set --url devnet
          solana-keygen new --no-bip39-passphrase --silent

      - name: Run Rust clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rust fmt check
        run: cargo fmt --all -- --check

      - name: Build Anchor program
        run: anchor build

      - name: Run Anchor tests
        run: anchor test --skip-local-validator

      - name: Upload program artifacts
        uses: actions/upload-artifact@v3
        with:
          name: anchor-artifacts
          path: |
            target/deploy/
            target/idl/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Rust security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-anchor]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Anchor artifacts
        uses: actions/download-artifact@v3
        with:
          name: anchor-artifacts
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/app.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Proton Bridge image
        uses: docker/build-push-action@v5
        with:
          context: docker
          file: docker/proton-bridge.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-proton-bridge:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # In real implementation, this would deploy to staging infrastructure
          # kubectl apply -f k8s/staging/
          echo "Staging deployment completed"

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # npm run test:integration
          echo "Integration tests passed"

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "ðŸš€ Staging deployment completed for commit ${{ github.sha }}",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Branch',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Akash CLI
        run: |
          curl -sSfL https://raw.githubusercontent.com/akash-network/node/master/install.sh | sh
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Deploy to Akash Network
        run: |
          echo "Deploying to Akash Network..."
          # akash tx deployment create docker/deploy.yaml --from ${{ secrets.AKASH_WALLET_NAME }} --chain-id akashnet-2
          echo "Production deployment completed"
        env:
          AKASH_KEYRING_BACKEND: ${{ secrets.AKASH_KEYRING_BACKEND }}
          AKASH_CHAIN_ID: akashnet-2
          AKASH_NODE: ${{ secrets.AKASH_NODE }}

      - name: Update deployment status
        run: |
          echo "Updating deployment status..."
          # Additional deployment verification steps

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "ðŸŽ‰ Production deployment completed for release ${{ github.event.release.tag_name }}",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Release',
                  value: '${{ github.event.release.tag_name }}',
                  short: true
                }, {
                  title: 'Environment',
                  value: 'Production',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # npm run test:performance
          echo "Performance tests completed"

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Cleanup old artifacts
        run: |
          echo "Cleaning up old artifacts..."
          # Cleanup logic for old Docker images, artifacts, etc.

      - name: Prune Docker images
        run: |
          echo "Pruning old Docker images..."
          # docker system prune -f
