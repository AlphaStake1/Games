# docker/docker-compose.yml
version: '3.9'

services:
  # Solana Test Validator (for local development)
  solana-validator:
    image: solanalabs/solana:v1.18.2
    container_name: solana-validator
    command: >
      solana-test-validator
      --reset
      --quiet
      --bind-address 0.0.0.0
      --rpc-port 8899
      --rpc-bind-address 0.0.0.0
      --gossip-port 8001
      --faucet-port 9900
      --dynamic-port-range 8002-8020
      --enable-rpc-transaction-history
      --enable-extended-tx-metadata-storage
    ports:
      - '8899:8899' # RPC
      - '8900:8900' # WebSocket
      - '9900:9900' # Faucet
    networks:
      - football-squares
    healthcheck:
      test:
        ['CMD', 'solana', 'cluster-version', '--url', 'http://localhost:8899']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ProtonMail Bridge for email functionality
  proton-bridge:
    build:
      context: .
      dockerfile: proton-bridge.Dockerfile
    container_name: proton-bridge
    environment:
      - PROTON_USERNAME=${PROTON_USERNAME}
      - PROTON_PASSWORD=${PROTON_PASSWORD}
    ports:
      - '1025:1025' # SMTP
      - '1143:1143' # IMAP
    networks:
      - football-squares
    volumes:
      - proton-bridge-data:/home/bridge/.config/protonmail
    restart: unless-stopped
    depends_on:
      - solana-validator

  # Main Application
  app:
    build:
      context: ..
      dockerfile: docker/app.Dockerfile
    container_name: football-squares-app
    environment:
      - NODE_ENV=production
      - RPC_ENDPOINT=http://solana-validator:8899
      - WS_PORT=8080
      - WS_HOST=0.0.0.0
      - SMTP_HOST=proton-bridge
      - SMTP_PORT=1025
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SWITCHBOARD_VRF_QUEUE=${SWITCHBOARD_VRF_QUEUE}
      - SWITCHBOARD_SCORE_FEED=${SWITCHBOARD_SCORE_FEED}
      - CERAMIC_DID_SEED=${CERAMIC_DID_SEED}
      - CLOCKWORK_THREAD_ID=${CLOCKWORK_THREAD_ID}
    ports:
      - '3000:3000' # Next.js app
      - '8080:8080' # WebSocket server
    networks:
      - football-squares
    volumes:
      - app-data:/app/data
      - ../target:/app/target
    restart: unless-stopped
    depends_on:
      solana-validator:
        condition: service_healthy
      proton-bridge:
        condition: service_healthy

  # Clockwork Crank (for automated task execution)
  clockwork-crank:
    build:
      context: .
      dockerfile: clockwork-crank.Dockerfile
    container_name: clockwork-crank
    environment:
      - RPC_ENDPOINT=http://solana-validator:8899
      - KEYPAIR_PATH=/app/keypair.json
      - CRANK_INTERVAL=10
    networks:
      - football-squares
    volumes:
      - crank-data:/app/data
      - ../target:/app/target
    restart: unless-stopped
    depends_on:
      solana-validator:
        condition: service_healthy

  # Ceramic Node (for persistent logging)
  ceramic:
    image: ceramicnetwork/js-ceramic:latest
    container_name: ceramic-node
    environment:
      - CERAMIC_NETWORK=testnet-clay
      - NODE_ENV=production
    ports:
      - '7007:7007' # Ceramic API
    networks:
      - football-squares
    volumes:
      - ceramic-data:/app/ceramic-data
    restart: unless-stopped
    command:
      ['ceramic', 'daemon', '--config', '/app/ceramic-data/daemon.config.json']

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - football-squares
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: ['redis-server', '--appendonly', 'yes']

  # Nginx (reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    networks:
      - football-squares
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-ssl:/etc/nginx/ssl
    restart: unless-stopped
    depends_on:
      - app

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    networks:
      - football-squares
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3001:3000'
    networks:
      - football-squares
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  football-squares:
    driver: bridge

volumes:
  proton-bridge-data:
  app-data:
  crank-data:
  ceramic-data:
  redis-data:
  nginx-ssl:
  prometheus-data:
  grafana-data:
